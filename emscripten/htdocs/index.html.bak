<!DOCTYPE html>
<!--
 webVGM: HTML5 Audio/JavaScript port of VGMPlay.

 	Copyright (C) 2015 Juergen Wothke

 Original C code of "VGMPlay" (see http://vgmrips.net/forum/viewtopic.php?t=112)

 Credits: The visualization used on this page was strongly "inspired" by this demo:
 http://html5-demos.appspot.com/static/webaudio/createMediaSourceElement.html

 LICENSE
 
 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2.1 of the License, or (at
 your option) any later version. This library is distributed in the hope
 that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
-->

<html>
<head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<title>webVGM - the VGM player for the Web</title>
<!-- emulate arrows of "HTML5 <details>" in Firefox-->
<style>			
	.no-details details > summary:before { float: left; width: 15px; content: '\25B6'; }
	.no-details details.open > summary:before { content: '\25BC'; }
</style>

<meta name="description" content="Experimental JavaScript version of VGMPlay; it plays various Arcade and Console game music files - formats like: Video Game Music Files (*.vgm, *.vgz), Creative Music Files (*.cmf), DosBox RAW OPL Log Files (*.dro). Supported sound chips: SN76496 (Sega PSG) and T6W28 (NeoGeo Pocket custom), YM2413* (OPLL), YM2612 (OPN2), YM2151 (OPM), SegaPCM, RF5C68, YM2203 (OPN), YM2608 (OPNA), YM2610/B (OPNB), YM3812* (OPL2), YM3526* (OPL), Y8950* (MSX AUDIO), YMF262* (OP3), YMF278B (OPL4), YMF271 (OPLX), YMZ280B, RF5C164 (Sega MegaCD PCM), PWM (from Sega 32x), AY8910 (MSX PSG), GameBoy DMG, NES APU (incl. FDS), MultiPCM, UPD7759, OKI6258 (Sharp X68000 ADPCM), OKI6295, K051649, K054539, HuC6280 (PC Engine), C140, K053260, Pokey (Atari), QSound, SCSP (Saturn Custom Sound Processor, YMF292-F">
<meta name="author" content="Juergen Wothke">
<meta name="keywords" content="Web Audio API, HTML5, JavaScript">

<!--link href="http://fonts.googleapis.com/css?family=Open+Sans:300" rel="stylesheet" type="text/css"-->
<link href="font.css" rel="stylesheet" type="text/css">
<link href="common.css" rel="stylesheet" type="text/css">
<link rel="image_src" href="screenshot.gif" />



<link rel="icon" href="favicon.ico" type="image/x-icon">
<link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />
<link type="image/x-icon" href="favicon.ico" />

<script type="text/javascript" src="vgmPlay.js"></script>
<script type="text/javascript" src="sample_player.js"></script>

<script src="/webvgm/stdlib/jquery1.11.min.js"></script>
<script src="/webvgm/stdlib/jquery.details.min.js"></script>
<script>
	window.console || (window.console = { 'log': alert });
	$(function() {
		$('html').addClass($.fn.details.support ? 'details' : 'no-details');
		$('details').details();

		if (!window.webkitAudioContext) {
			// hack to get rid of Firefox specific pseudo elements used to sim webkit-box-reflect
			var e = document.getElementById("moz-reflect-logo");		
			e.className += " enableMozReflection";
			var e2 = document.getElementById("moz-reflect-spectrum");		
			e2.className += " enableMozReflection";
		}
	});	
</script>

<script>
var basePath= 'music/';
var songs = [
// add your music files here, e.g.:
//	basePath+'some.vgz;2',	// boost volume <<2 for this one (hack for songs that for some reason don't play loud enough)
];

var player= new SamplePlayer(basePath, doOnEnd, doOnUpdate);

function doOnEnd(){ audio.playNextSong(); player.isPaused= false; }
function doOnUpdate(){ 
	audio.initialAudioSetup();
	updateGUI();
	audio.startMusicPlayback();		
}

// ---------------------------- WebAudio stuff ----------------------------

Audio = function(songs) {
	this.audioCtx;
	this.bufferSource;
	this.gainNode;
	this.analyzerNode;
	
	this.current=-1;
	this.someSongs= songs;
	
	if (songs.length == 0)
		alert("No music files available. Please place some files in your 'music' folder and configure them in the'songs' list in index.html.");
	
	this.isReady= false;
	
	// preload all the intrastructure files so we won't run into async load issues later
	var files = [
		"VGMPlay.ini",
		"yrw801.rom"	// enable only if needed/available
	];		
	var f= window.player['preloadFiles'].bind(window.player);
	f(files, function() {
		this.isReady= true;
		this.playNextSong();
		
	}.bind(this));
};

Audio.prototype = {
	initialAudioSetup: function() {
		if (typeof this.bufferSource != 'undefined') { 
			this.bufferSource.stop(0);
		} else {
			this.setupAudioNodes();
		}
	},
	setupAudioNodes: function() {
		if (typeof this.audioCtx == 'undefined') {
			try {
				window.AudioContext = window.AudioContext||window.webkitAudioContext;
				this.audioCtx = new AudioContext();
			} catch(e) {
				alert('Web Audio API is not supported in this browser (get Chrome 18 or Firefox 26)');
			}
			this.analyzerNode = this.audioCtx.createAnalyser();

			var scriptNode= player.createScriptProcessor(this.audioCtx);
			
			this.gainNode = this.audioCtx.createGain();
						
			scriptNode.connect(this.gainNode);
			this.gainNode.connect(this.analyzerNode);
			this.analyzerNode.connect(this.audioCtx.destination);
		}
	},
	
	removeFromPlaylist: function(songname) {
		if (this.someSongs[this.current] == songname) {
			this.someSongs.splice(this.current, 1);
			if (this.current + 1 == this.someSongs.length) this.current= 0;
		}
	},
	playNextSong: function() {
		if (this.isReady && this.someSongs.length) {	
			this.current= (++this.current >=this.someSongs.length) ? 0 : this.current;
			var someSong= this.someSongs[this.current];
			this.playSong(someSong);
		}
	},
	playPreviousSong: function() {
		if (this.isReady && this.someSongs.length) {	
			this.current= (--this.current<0) ? this.current+this.someSongs.length : this.current;
			var someSong= this.someSongs[this.current];
			this.playSong(someSong);
		}
	},
	playSong: function(someSong) {
		var arr= someSong.split(";");	
		var track= 0;					// archives are not supported and *.vgz/*.vgm contain always 1 track
		var boostVolume= arr.length>1?parseInt(arr[1]):0;		
		var fn= arr[0];
		
		var xhr = new XMLHttpRequest();
		xhr.open("GET", fn, true);
		xhr.responseType = "arraybuffer";
		xhr.onload = function (oEvent) {		
				if(!player.playSong(fn, xhr.response, track, boostVolume)) {
					this.removeFromPlaylist(someSong);	// no point trying to play this again
				}		
		}.bind(this);
		xhr.send(null);
	},
	startMusicPlayback: function() {
		player.isPaused= false;

		if (typeof this.bufferSource === 'undefined') {
			this.bufferSource = this.audioCtx.createBufferSource();
			if (!this.bufferSource.start) {
			  this.bufferSource.start = this.bufferSource.noteOn;
			  this.bufferSource.stop = this.bufferSource.noteOff;
			}
			this.bufferSource.start(0);		
		}
	}
};

// ---------------------    drag&drop feature -----------------------------------
function allowDrop(ev) {
    ev.preventDefault();
}
function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData("Text");
	var file = ev.dataTransfer.files[0];
	if (audio.isReady && file instanceof File) {
		file.name= basePath + file.name;	// put into the same folder as our regular files
		var f= window.player['playTmpFile'].bind(window.player);
		f(file);
	}
}
// ---------------------------- some visuals ----------------------------

Graphix = function(audio) {
	this.audio= audio;
	this.hexChars= "0123456789ABCDEF";
		
	this.WIDTH= 800;
	this.HEIGHT= 200;
	
	this.refreshCounter=0;
	this.lastRenderTime=0;
	this.worstRenderTime=0;
	
	this.canvasSpectrum = document.getElementById('spectrumCanvas');
	this.ctxSpectrum = this.canvasSpectrum.getContext('2d');
	this.canvasSpectrum.width = this.WIDTH;

	this.mozReflectSpectrum = document.getElementById('moz-reflect-spectrum');
	this.mozReflectLogo = document.getElementById('moz-reflect-logo');
	
	var canvas2 = document.getElementById('logoCanvas');
	this.ctxLegend = canvas2.getContext('2d');
	
	this.freqByteData = 0; 
};

Graphix.prototype = {
	reqAnimationFrame: function() {
		window.requestAnimationFrame(this.redrawSpectrum.bind(this));
	},
	redrawSpectrum: function() {
		this.reqAnimationFrame();
		
		// limit the CPU load caused my the graphics..
		this.worstRenderTime= Math.max(this.worstRenderTime*0.7,(this.lastRenderTime ? new Date().getTime()-this.lastRenderTime : 0));
		this.lastRenderTime= new Date().getTime();
		
		var fullSpeedLimit= 1000/60;	// render time limit in ms that still allows to refresh every time
		var slowdownFactor= Math.max(1, this.worstRenderTime/fullSpeedLimit);
		this.refreshCounter++;

		if (this.refreshCounter >= slowdownFactor) {
			this.refreshCounter= 0;
			
			if (this.freqByteData == 0)
				this.freqByteData = new Uint8Array(this.audio.analyzerNode.frequencyBinCount);	
			
			this.audio.analyzerNode.getByteFrequencyData(this.freqByteData);

			var SPACER_WIDTH = 10;
			var BAR_WIDTH = 5;
			var OFFSET = 100;
			var patternHeight= 9;	
			var patternWidth= 295;	
			
			var numBars = Math.round(this.WIDTH / SPACER_WIDTH);

			this.ctxSpectrum.clearRect(0, 0, this.WIDTH, this.HEIGHT);

			this.ctxSpectrum.fillStyle = '#fe5139';
			this.ctxSpectrum.lineCap = 'round';
			
			for (var i = 0; i < numBars; ++i) {
				var scale= this.freqByteData[i + OFFSET]/0xff;
				var magnitude = scale*this.HEIGHT;
				x=i/numBars*500;

				var yellow= 0xf4cb25;
				var red= 0xef210a;
				var blue= 0x1b1088;
				var purple= 0x630f64;
				var cols= [yellow, red, purple, blue, blue];
				
				this.ctxSpectrum.fillStyle = this.colorGradient(cols,i/numBars);	// computationally much less expensive than previous impl with use of a scaled image
				this.ctxSpectrum.fillRect(i * SPACER_WIDTH, this.HEIGHT- magnitude, BAR_WIDTH, 30*(scale*1.4));

				// hack: make sure dumb Firefox knows that redraw is needed..
				this.mozReflectSpectrum.style.visibility = "hidden";
				this.mozReflectSpectrum.style.visibility = "visible";
			}
		}
	},
	text: function(ctx, text, x, y) {
		ctx.strokeText(text, x, y);
		ctx.fillText(text, x, y);
	},
	redrawSongInfo: function() {
		this.ctxLegend.clearRect(0, 0, 800, 300);
		
		this.ctxLegend.textBaseline = "middle";
		this.ctxLegend.fillStyle = '#000';
		this.ctxLegend.strokeStyle = "#FFFFFF";
		
		this.ctxLegend.font = '90px serif bold';
		
		this.text(this.ctxLegend, "webVGM", 20, 70);
		
		this.ctxLegend.font = '25px sans-serif';
		this.text(this.ctxLegend, "video game music nostalgia..", 20, 125);

		this.ctxLegend.fillStyle = '#888';
		this.ctxLegend.font = '25px sans-serif';

		this.ctxLegend.textBaseline = 'bottom';
		this.text(this.ctxLegend, player.title, 20, 190);
		this.text(this.ctxLegend, player.program, 20, 230);
		this.text(this.ctxLegend, "", 20, 270);
		
		// hack: make sure dumb Firefox knows that redraw is needed..
		this.mozReflectLogo.style.visibility = "hidden";
		this.mozReflectLogo.style.visibility = "visible";
		
	},
	colorGradient: function(cols, s) {
		var p= (cols.length-1)*s;
		var i= Math.floor(p);
		
		return this.fadeColor(cols[i], cols[i+1], p-i);
	},
	fadeColor: function(from, to, s) {
		var r1= (from >>16) & 0xff;
		var g1= (from >>8) & 0xff;
		var b1= from & 0xff;

		var r= Math.round(r1+(((to >>16) & 0xff)-r1)*s);
		var g= Math.round(g1+(((to >>8) & 0xff)-g1)*s);
		var b= Math.round(b1+((to & 0xff)-b1)*s);
	
		return "#" +this.hex(r>>4) +this.hex(r) +this.hex(g>>4) +this.hex(g) +this.hex(b>>4) +this.hex(b);
	},
	hex: function(n) {
		return this.hexChars.charAt(n & 0xf);
	}

};

function updateGUI() {
	gfx.reqAnimationFrame();
	gfx.redrawSongInfo();
}

function init() {
	audio= new Audio(songs);
	gfx= new Graphix(audio);


	document.getElementById("previous").onclick = audio.playPreviousSong.bind(audio);
	document.getElementById("next").onclick = audio.playNextSong.bind(audio);
			
	document.getElementById("play").onclick = function(e){
		player.isPaused= false;
	};
	document.getElementById("pause").onclick = function(e){
		player.isPaused= true;
	};
	document.getElementById("gain").onchange = function(e){
		audio.gainNode.gain.value= this.value/255;
	};
	audio.playNextSong();
}

</script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-60370798-1', 'auto');
  ga('send', 'pageview');

</script>
</head>

<body onload="init();">
<div class="tooltip" id="tooltip" alt="This is a hobby project, but it costs not only time to regularily maintain this site but also money to pay for the internet service provider (etc). If you want to keep this site up and running.. or if you just like my work (see https://jwothke.wordpress.com/) and you'd like to see more of it in the future, please make a contribution. Thank you!">
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="E7ACAHA7W5FYC">
<input type="image" src="btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" border="0" src="pixel.gif" width="1" height="1">
</form>
</div>

<details>
  <summary>What's this?</summary>
  <div>
 <p>
    webVGM: Experimental JavaScript/HTML5 version of <a href="http://vgmrips.net/forum/viewtopic.php?t=112" target="_blank">VGMPlay</a>. 
	
	(Plays various Arcade and Console game music files - formats like: Video Game Music Files (*.vgm, *.vgz), Creative Music Files (*.cmf), DosBox RAW OPL Log Files (*.dro). Supported sound chips: SN76496 (Sega PSG) and T6W28 (NeoGeo Pocket custom), YM2413* (OPLL), YM2612 (OPN2), YM2151 (OPM), SegaPCM, RF5C68, YM2203 (OPN), YM2608 (OPNA), YM2610/B (OPNB), YM3812* (OPL2), YM3526* (OPL), Y8950* (MSX AUDIO), YMF262* (OP3), YMF278B (OPL4), YMF271 (OPLX), YMZ280B, RF5C164 (Sega MegaCD PCM), PWM (from Sega 32x), AY8910 (MSX PSG), GameBoy DMG, NES APU (incl. FDS), MultiPCM, UPD7759, OKI6258 (Sharp X68000 ADPCM), OKI6295, K051649, K054539, HuC6280 (PC Engine), C140, K053260, Pokey (Atari), QSound, SCSP (Saturn Custom Sound Processor, YMF292-F)
 </p>
 <p>
	Respective music files can be found <a href="http://vgmrips.net/packs/" target="_blank">here</a>. Bring your own music files by dropping them onto the arcade machine.
 </p>
 
  <p>2015 by Juergen Wothke</p>
 
  <p>This page does not use any plugins but is based exclusively on the draft version Web Audio API. 
  You'll need Chrome or Firefox to make it play the music. The visual effects 
  work best in Chrome. (If Firefox passes out - press 'reload'... it's experimental.)
  
  <p>Contrarry to most other HTML5 based pages out there, the music here is NOT based on  
  OscillatorNode based waveforms or the playback of some sampledata file. Instead the samples here 
  are completely calculated within JavaScript by running the VGMPLay emulator logic. (The source code can be found <a target="_blank" href="https://github.com/wothke/">here</a>.)</p>  
 <p>Please use controls on the right (e.g. to play another song): 
<button id="play"> &gt;</button>
<button id="pause"> ||</button>
<button id="previous"> |&lt;&lt;</button>
<button id="next"> &gt;&gt;|</button>
<input type="range" id="gain" name="gain" min="1" max="255" value="255">

 </div>
</details>
<aside>
  
</aside>

<section>
  <div id="logo" class="logo">
	<div id="moz-reflect-logo"><canvas  id="logoCanvas"  width="600" height="250"></canvas></div>
  </div>
  <div id="spectrum" class="spectrum">
  	<div id="moz-reflect-spectrum"><canvas id="spectrumCanvas" width="512" height="200"></canvas></div>
  </div>
  <div id="drop" class="drop" ondrop="drop(event)" ondragover="allowDrop(event)">
 <img src="arcade.gif" width=270 height=270/>
  </div>

</section>

</body>
</html>
